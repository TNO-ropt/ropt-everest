{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>ropt-everest</code>","text":"<p>The <code>ropt-everest</code> plugin extends <code>ropt</code> with functionality specific to Everest. It primarily offers two key features:</p> <ol> <li>Enhanced Reporting: It generates tables containing optimization results,    which are saved to disk after each batch evaluation.</li> <li>Custom Workflow Implementation: It provides the ability to load custom    Python code to override the default optimization workflow.</li> </ol>"},{"location":"reference/everest_plan/","title":"Everest Plan","text":""},{"location":"reference/everest_plan/#ropt_everest.EverestPlan","title":"<code>ropt_everest.EverestPlan</code>","text":"<p>Represents an execution plan for an Everest optimization workflow.</p> <p>The <code>EverestPlan</code> class provides a high-level interface for defining and managing optimization workflows in Everest. It allows you to add various steps to the plan, such as optimizers, evaluators, and workflow jobs, that are then executed to achieve the desired optimization goal.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestPlan.config_copy","title":"<code>config_copy()</code>","text":"<p>Retrieves a copy of the default Everest configuration.</p> <p>This method returns a copy of the Everest configuration used during startup. Modifications to the returned dictionary will not affect the original configuration.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>A dictionary representing the Everest configuration.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestPlan.add_optimizer","title":"<code>add_optimizer()</code>","text":"<p>Adds an optimizer to the execution plan.</p> <p>This method integrates an optimization step into your Everest workflow. Invoking this method returns an <code>EverestOptimizerStep</code> object, which you can execute using its <code>run</code> method.</p> <p>Returns:</p> Type Description <code>EverestOptimizerStep</code> <p>An <code>EverestOptimizerStep</code> object, representing the added optimizer.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestPlan.add_evaluator","title":"<code>add_evaluator()</code>","text":"<p>Adds an evaluator to the execution plan.</p> <p>This method integrates an evaluation step into your Everest workflow. Invoking this method returns an <code>EverestEvaluatorStep</code> object, which you can execute using its <code>run</code> method.</p> <p>Returns:</p> Type Description <code>EverestEvaluatorStep</code> <p>An <code>EverestEvaluatorStep</code> object, representing the added evaluator.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestPlan.add_workflow_job","title":"<code>add_workflow_job()</code>","text":"<p>Adds a workflow job step to the execution plan.</p> <p>This method incorporates a workflow job into the execution plan. Workflow jobs are used to run external operations. Invoking this method returns an <code>EverestWorkflowJobStep</code> object, which you can execute using its <code>run</code> method.</p> <p>This step can be used to incorporate different external programs or scripts into the current optimization process.</p> <p>Returns:</p> Type Description <code>EverestWorkflowJobStep</code> <p>An <code>EverestWorkflowJobStep</code> object, representing the added workflow job step.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestPlan.add_store","title":"<code>add_store(steps)</code>","text":"<p>Adds a results store to the execution plan.</p> <p>Stores the results of specified optimization or evaluation steps.</p> <p>Invoking this method returns an <code>EverestStore</code> object, which provides various methods to access the stored results.</p> <p>steps: This argument specifies which steps in the execution plan the store should monitor. You can provide either a single step object (such as an optimizer or evaluator) or a sequence of steps. The store object will record all the results generated by these steps.</p> <p>Parameters:</p> Name Type Description Default <code>steps</code> <code>EverestStep | Sequence[EverestStep]</code> <p>The EverestStep(s) to monitor.</p> required <p>Returns:</p> Type Description <code>EverestStore</code> <p>An <code>EverestStore</code> object, which can be used to access the stored results.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestPlan.add_tracker","title":"<code>add_tracker(steps, *, what='best', constraint_tolerance=None)</code>","text":"<p>Adds a tracker to the execution plan.</p> <p>Trackers monitor the progress of specified optimization or evaluation steps and record relevant results. They provide a way to capture and analyze the outcomes of these steps during the execution of the plan. You can configure a tracker to save the best or the last results generated by the tracked steps.</p> <p>Invoking this method returns an <code>EverestTracker</code> object, which provides various methods to access the tracked results.</p> <p>A tracker is configured by three arguments:</p> <p>steps: This argument specifies which steps in the execution plan the tracker should monitor. You can provide either a single step object (such as an optimizer or evaluator) or a sequence of steps. The tracker will record the results generated by these steps.</p> <p>what: This argument determines which results the tracker should record. You can choose from the following options:</p> <ul> <li><code>\"best\"</code>: Only the best result found so far is tracked.</li> <li><code>\"last\"</code>: Only the most recently generated result is tracked.</li> </ul> <p>The default value is <code>\"best\"</code>.</p> <p>constraint_tolerance: This optional argument specifies the tolerance for constraint satisfaction. It is used to determine whether a result is considered feasible, meaning it satisfies the defined constraints within the specified tolerance. Only feasible results will be recorded. If it is not set, constraints are not tested.</p> <p>Parameters:</p> Name Type Description Default <code>steps</code> <code>EverestStep | Sequence[EverestStep]</code> <p>The EverestStep(s) to monitor.</p> required <code>what</code> <code>Literal['best', 'last']</code> <p>Which results to track (\"best\" or \"last\").</p> <code>'best'</code> <code>constraint_tolerance</code> <code>float | None</code> <p>Tolerance for constraint satisfaction.</p> <code>None</code> <p>Returns:</p> Type Description <code>EverestTracker</code> <p>An <code>EverestTracker</code> object, which can be used to access the tracked results.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestPlan.add_table","title":"<code>add_table(steps)</code>","text":"<p>Adds a handler that create a table to the execution plan.</p> <p>This handler will monitor the progress of specified optimization or evaluation steps and record relevant results. A set of tables will then be generated and saved in the output directory.</p> <p>Parameters:</p> Name Type Description Default <code>steps</code> <code>EverestStep | Sequence[EverestStep]</code> <p>The EverestStep(s) to monitor.</p> required <p>Returns:</p> Type Description <code>EverestTableHandler</code> <p>An <code>EverestTableHandler</code> object.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestPlan.everest","title":"<code>everest(config_file)</code>  <code>classmethod</code>","text":"<p>Runs an Everest optimization directly from a configuration file.</p> <p>This class method provides a convenient way to execute an Everest optimization plan  without having to use the <code>everest</code> command. This method will run a full optimization, but it will not produce the usual monitoring output of Everest.</p> <p>Using this method instead of the <code>everest</code> command-line tool offers several advantages, including:</p> <ul> <li>Direct access to standard output (stdout): Unlike the <code>everest</code>   command, this does not redirect standard output.</li> <li>Error traces: If errors occur during the optimization, you'll get a   full Python stack trace, making debugging easier.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>config_file</code> <code>str</code> <p>The path to the Everest configuration file (YAML).</p> required"},{"location":"reference/everest_plan/#ropt_everest.EverestOptimizerStep","title":"<code>ropt_everest.EverestOptimizerStep</code>","text":"<p>               Bases: <code>EverestStep</code></p> <p>Represents an optimizer step in an Everest execution plan.</p> <p>This class encapsulates an optimization step within an Everest workflow. It provides a method to execute the optimizer .</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestOptimizerStep.run","title":"<code>run(config=None, variables=None, metadata=None)</code>","text":"<p>Runs the optimizer.</p> <p>This method executes the underlying optimizer with the given parameters. You can tailor the optimizer's behavior by providing an optional configuration dictionary.</p> <p>Configuration:</p> <ul> <li>If no <code>config</code> is provided, the optimizer will use the default   Everest configuration loaded during startup.</li> <li>If a <code>config</code> dictionary is provided, it will override the default   configuration. It should be a dictionary that can be validated as an   <code>EverestConfig</code> object.</li> </ul> <p>Variables:</p> <p>If no variables are provided, the optimizer will use the initial values from the configuration.</p> <p>Metadata:</p> <ul> <li>The <code>metadata</code> parameter allows you to associate arbitrary data with   each result generated by the optimizer or evaluators.</li> <li>This metadata is included in generated tables and data frames.</li> <li>The keys in the <code>metadata</code> dictionary are used as column names in   the output tables.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict[str, Any] | None</code> <p>An optional dictionary containing the Everest configuration        for the optimizer. If omitted, the default configuration is        used.</p> <code>None</code> <code>variables</code> <code>ArrayLike | None</code> <p>An array-like object containing the variables for the optimization.</p> <code>None</code> <code>metadata</code> <code>dict[str, Any] | None</code> <p>An optional dictionary of metadata to associate with the        results of the optimizer's results.</p> <code>None</code>"},{"location":"reference/everest_plan/#ropt_everest.EverestEvaluatorStep","title":"<code>ropt_everest.EverestEvaluatorStep</code>","text":"<p>               Bases: <code>EverestStep</code></p> <p>Represents an evaluator step in an Everest execution plan.</p> <p>This class encapsulates an evaluation step within an Everest workflow. It provides a method to execute the evaluator .</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestEvaluatorStep.run","title":"<code>run(config=None, variables=None, metadata=None)</code>","text":"<p>Runs the evaluator.</p> <p>This method executes the underlying evaluator with the given parameters. You can tailor the evaluators's behavior by providing an optional configuration dictionary.</p> <p>Configuration:</p> <ul> <li>If no <code>config</code> is provided, the evaluator will use the default   Everest configuration loaded during startup.</li> <li>If a <code>config</code> dictionary is provided, it will override the default   configuration. It should be a dictionary that can be validated as an   <code>EverestConfig</code> object.</li> </ul> <p>Variables:</p> <p>The <code>variables</code> parameter can be a single vector, a sequence of multiple vectors, or a 2D matrix where the variable vectors are the rows. If no variables are provided, the evaluator will use its default the initial values from the configuration.</p> <p>Metadata:</p> <ul> <li>The <code>metadata</code> parameter allows you to associate arbitrary data with   each result generated by the optimizer or evaluators.</li> <li>This metadata is included in generated tables and data frames.</li> <li>The keys in the <code>metadata</code> dictionary are used as column names in   the output tables.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict[str, Any] | None</code> <p>An optional dictionary containing the Everest configuration        for the optimizer. If omitted, the default configuration is        used.</p> <code>None</code> <code>variables</code> <code>ArrayLike | None</code> <p>An array-like object containing the variables for the optimization.</p> <code>None</code> <code>metadata</code> <code>dict[str, Any] | None</code> <p>An optional dictionary of metadata to associate with the        results of the optimizer's results.</p> <code>None</code>"},{"location":"reference/everest_plan/#ropt_everest.EverestWorkflowJobStep","title":"<code>ropt_everest.EverestWorkflowJobStep</code>","text":"<p>               Bases: <code>EverestStep</code></p> <p>Represents a workflow job step in an Everest execution plan.</p> <p>This class encapsulates a workflow job step within an Everest workflow. It provides a method to execute the workflow job.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestWorkflowJobStep.run","title":"<code>run(jobs)</code>","text":"<p>Runs the workflow job.</p> <p>This method executes the workflow jobs as defined by the provided job names. The jobs must have been defined in the Everest configuration file in the <code>install_workflow_jobs</code> section.</p> <p>Parameters:</p> Name Type Description Default <code>jobs</code> <code>list[str]</code> <p>A list of commands to run.</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>A dictionary containing the workflow report.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestStore","title":"<code>ropt_everest.EverestStore</code>","text":"<p>               Bases: <code>EverestHandler</code></p> <p>Provides access to the results stored by an Everest execution plan.</p> <p>This class provides methods to retrieve and analyze the results produces within an Everest execution plan. It allows you to access the results. You can also convert the stored results into a Pandas DataFrame for easier analysis.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestStore.results","title":"<code>results</code>  <code>property</code>","text":"<p>Retrieves the stored results.</p> <p>Returns:</p> Type Description <code>list[Results] | None</code> <p>The stored results.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestStore.variables","title":"<code>variables</code>  <code>property</code>","text":"<p>Retrieves the stored variables.</p> <p>Returns:</p> Type Description <code>NDArray[float64] | list[NDArray[float64]] | None</code> <p>The stored variables.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestStore.reset","title":"<code>reset()</code>","text":"<p>Reset the store.</p> <p>Clears any results accumulated so far.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestStore.dataframe","title":"<code>dataframe(kind)</code>","text":"<p>Converts the stored results to a Pandas DataFrame.</p> <p>This method converts the tracked results into a Pandas DataFrame, making it easier to analyze and visualize the data.</p> <p>The <code>kind</code> argument supports the following options:</p> <ul> <li><code>\"results\"</code>:       For function results.</li> <li><code>\"gradients\"</code>:     For gradient results.</li> <li><code>\"simulations\"</code>:   For simulation results.</li> <li><code>\"perturbations\"</code>: For perturbation results.</li> <li><code>\"constraints\"</code>:   For constraint information.</li> </ul> Note <p>The column names of the dataframe may be strings or tuples of strings. In the tuple form, the name is usually composed of a string indicating the type of column and one or more objective, constraint or control names. For instance, a column containing values of the variable <code>point.x</code> may have the name: <code>(variables, point.x)</code>. The gradient of an objective <code>distance</code> with respect to a variable <code>point.x</code> may have the column name <code>(objectives, distance, point.x.0)</code>.</p> <p>Parameters:</p> Name Type Description Default <code>kind</code> <code>str</code> <p>The type of table to create.</p> required <p>Returns:</p> Type Description <code>DataFrame | None</code> <p>A Pandas DataFrame containing the store results, or None.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestTracker","title":"<code>ropt_everest.EverestTracker</code>","text":"<p>               Bases: <code>EverestHandler</code></p> <p>Provides access to the results generated by an Everest execution plan.</p> <p>This class provides methods to retrieve and analyze the results tracked by a tracker within an Everest execution plan. It allows you to access the results. You can also convert the tracked results into a Pandas DataFrame for easier analysis.</p> <p>The tracker can keep track of the best, the last, or all the results. The tracker can also be set to only keep track of the feasible results.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestTracker.results","title":"<code>results</code>  <code>property</code>","text":"<p>Retrieves the tracked results.</p> <p>Returns:</p> Type Description <code>FunctionResults | None</code> <p>The tracked results.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestTracker.variables","title":"<code>variables</code>  <code>property</code>","text":"<p>Retrieves the tracked variables.</p> <p>The tracked variables can be a single NumPy array, a list of NumPy arrays, or None if no variables have been tracked.</p> <p>Returns:</p> Type Description <code>NDArray[float64] | None</code> <p>The tracked variables.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestTracker.reset","title":"<code>reset()</code>","text":"<p>Reset the tracker.</p> <p>Clears any results accumulated so far.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestTracker.dataframe","title":"<code>dataframe(kind)</code>","text":"<p>Converts the tracked results to a Pandas DataFrame.</p> <p>This method converts the tracked results into a Pandas DataFrame, making it easier to analyze and visualize the data.</p> <p>The <code>kind</code> argument supports the following options:</p> <ul> <li><code>\"results\"</code>:       For function results.</li> <li><code>\"gradients\"</code>:     For gradient results.</li> <li><code>\"simulations\"</code>:   For simulation results.</li> <li><code>\"perturbations\"</code>: For perturbation results.</li> <li><code>\"constraints\"</code>:   For constraint information.</li> </ul> Note <p>The column names of the dataframe may be strings or tuples of strings. In the tuple form, the name is usually composed of a string indicating the type of column and one or more objective, constraint or control names. For instance, a column containing values of the variable <code>point.x</code> may have the name: <code>(variables, point.x)</code>. The gradient of an objective <code>distance</code> with respect to a variable <code>point.x</code> may have the column name <code>(objectives, distance, point.x.0)</code>.</p> <p>Parameters:</p> Name Type Description Default <code>kind</code> <code>str</code> <p>The type of table to create.</p> required <p>Returns:</p> Type Description <code>DataFrame | None</code> <p>A Pandas DataFrame containing the tracked results, or None.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestTableHandler","title":"<code>ropt_everest.EverestTableHandler</code>","text":"<p>               Bases: <code>EverestHandler</code></p> <p>Represents a table handler in an Everest execution plan.</p>"},{"location":"usage/basics/","title":"Basic Usage","text":""},{"location":"usage/basics/#running-custom-optimization-workflows","title":"Running custom optimization workflows","text":"<p>The ropt-everest plugin allows you to customize and extend the default optimization workflow in Everest. Normally, Everest performs a single optimization run based on the parameters in a YAML configuration file. However, with ropt-everest, you can override this behavior.</p> <p>To customize the workflow, create a Python file with the same base name as your Everest configuration file (YAML) and place it in the same directory. If this Python file contains a function named <code>run_plan</code>, this function will be executed instead of the standard Everest optimization process. This allows you to define complex, multi-step optimization strategies, incorporate custom logic, and gain fine-grained control over the optimization process.</p> <p>The <code>run_plan</code> function must have the following signature:</p> <pre><code>def run_plan_basic(plan: EverestPlan) -&gt; None:\n    ...\n</code></pre> <p>The function must accept an <code>EverestPlan</code> object, which is used to define and execute the optimization workflow. This object is created by Everest and provided to <code>run_plan</code> via the <code>plan</code> parameter.</p> <p>Developing and executing a custom workflow involves two key aspects:</p> <ol> <li> <p>Defining the Workflow: This entails adding the individual steps and     their associated result handlers to the <code>EverestPlan</code>. These steps can     include optimizers, evaluators, and other custom operations. Result     handlers, such as trackers and table outputs, capture the outcomes of each     step.</p> </li> <li> <p>Executing and Inspecting: This process involves arranging the defined     steps in the desired order of execution and leveraging the result handlers     to analyze the output data. The <code>EverestPlan</code> automatically manages the     execution of these steps, guaranteeing their correct operation and ensuring     that results are consistently captured and made accessible. Because the     <code>run_plan</code> function is implemented in standard Python, you can use the full     power of Python programming (e.g., loops, conditional statements, and custom     functions) to create sophisticated and adaptable optimization workflows.</p> </li> </ol> <p>For example, this <code>run_plan</code> function reproduces the default Everest optimization:</p> <pre><code>def run_plan(plan):\n    optimizer = plan.add_optimizer()       # Add an optimizer step\n    tracker = plan.add_tracker(optimizer)  # Add a tracker\n    plan.add_table(optimizer)              # Add a table handler\n    optimizer.run()                        # Run the optimizer\n</code></pre> <p>This function executes a basic optimization workflow by performing these steps:</p> <ol> <li>Plan Creation: Everest creates an     <code>EverestPlan</code> object and passes it to <code>run_plan</code>     via the <code>plan</code> parameter.</li> <li>Optimizer Addition: An optimizer step is added to the plan using the     <code>add_optimizer</code> method.</li> <li>Tracker Addition: A tracker result handler is attached to the optimizer     step using the <code>add_tracker</code> method     to monitor its progress.</li> <li>Table Handler Addition: A table handler is added to the plan using the     <code>add_table</code> method. This will save the     optimization results in a set of tables.</li> <li>Optimizer Execution: The optimization process is started by calling the     <code>run</code> method of the optimizer step.</li> </ol>"},{"location":"usage/basics/#everestplan-methods","title":"EverestPlan Methods","text":"<p>The <code>EverestPlan</code> class provides a high-level interface for defining and managing optimization workflows in Everest. It allows you to add various steps to the plan, such as optimizers, evaluators, and workflow jobs, that are then executed to achieve the desired optimization goal.</p> <p>Key Features:</p> <ul> <li>Step Management: Add and manage different types of optimization steps,     including optimizers, evaluators, and workflow jobs.</li> <li>Tracking and Monitoring: Incorporate trackers to monitor the progress of     specific steps and collect relevant results.</li> <li>Table Generation: Generate tables to summarize the results of the     optimization process.</li> <li>Configuration Handling: Manage Everest configurations, including the     ability to override default settings.</li> <li>Metadata Association: Associate arbitrary metadata with steps and results,    facilitating the tracking of additional information.</li> <li>Direct Execution: Execute the plan directly, providing more control over     stdout and error traces.</li> </ul> <p>The <code>EverestPlan</code> object provides several methods for building and managing optimization workflows:</p>"},{"location":"usage/basics/#config_copy","title":"<code>config_copy</code>","text":"<p>Creates a modifiable copy of the Everest configuration dictionary. This copy allows you to override specific configuration settings to use with optimizer steps.</p>"},{"location":"usage/basics/#add_optimizer","title":"<code>add_optimizer</code>","text":"<p>Adds an optimizer step to the workflow plan. The resulting <code>EverestOptimizerStep</code> object can be executed using its <code>run</code> method. The <code>run</code> method supports the following parameters to customize its behavior:</p> <ul> <li>config (<code>dict</code>, optional): A dictionary to override the default Everest     configuration. If not specified, the original Everest configuration is used.     You can modify the result of     <code>plan.config_copy()</code> to create a     suitable configuration.</li> <li>variables (<code>array-like</code>, optional): Initial variable values for the     optimizer. If not specified, the initial values from the Everest     configuration are used.</li> <li>metadata (<code>dict</code>, optional): A dictionary of metadata to be associated     with each result generated by the optimizer.</li> </ul>"},{"location":"usage/basics/#add_evaluator","title":"<code>add_evaluator</code>","text":"<p>Adds an evaluator step to the workflow plan. The resulting <code>EverestEvaluatorStep</code> object can be executed using its <code>run</code> method. The <code>run</code> method supports the following parameters to customize its behavior:</p> <ul> <li>config (<code>dict</code>, optional): A dictionary to override the default Everest     configuration. If not specified, the original Everest configuration is used.     You can modify the result of     <code>plan.config_copy()</code> to create a     suitable configuration.</li> <li>variables (<code>array-like</code>, optional): The variables that will be evaluated.     This can be a single vector, a sequence of multiple vectors, or a 2D matrix     where the variable vectors are the rows. If multiple vectors or a 2D matrix     is supplied, an evaluation is performed for each variable vector. If not     specified, the initial values from the Everest configuration are used.</li> <li>metadata (<code>dict</code>, optional): A dictionary of metadata to be associated     with each result generated by the evaluator.</li> </ul>"},{"location":"usage/basics/#add_workflow_job","title":"<code>add_workflow_job</code>","text":"<p>Adds a workflow job step to the plan. The resulting <code>EverestWorkflowJobStep</code> object can be executed using its <code>run</code> method. The <code>run</code> method accepts a list of job names to execute. These jobs must be defined in the <code>install_workflow_jobs</code> section of the Everest configuration file.</p>"},{"location":"usage/basics/#add_store","title":"<code>add_store</code>","text":"<p>Adds a result store to the plan to record the progress of a step. The resulting <code>EverestStore</code> object stores results emitted by optimizers and evaluators that it is monitoring. It accepts the following arguments:</p> <ul> <li>steps: A single step object or a list of step objects to track. The     tracker will only record results generated by the specified steps.</li> </ul> <p>The tracker object returned by <code>add_store</code> supports the following properties to inspect the results that it stores:</p> <ul> <li>results:   The list of results that is stored.</li> <li>variables: The variables in the stored results.</li> </ul> <p>In addition, the following methods are available:</p> <ul> <li><code>reset</code>: Reset the tracker to contain     no results.</li> <li><code>dataframe</code>: Export the results     as Pandas data frames.</li> </ul>"},{"location":"usage/basics/#add_tracker","title":"<code>add_tracker</code>","text":"<p>Adds a result tracker to the plan to monitor the progress of a step. The resulting <code>EverestTracker</code> object tracks and stores results emitted by optimizers and evaluators that it is monitoring. It accepts the following arguments:</p> <ul> <li>steps: A single step object or a list of step objects to track. The     tracker will only record results generated by the specified steps.</li> <li>what: This argument determines which results the tracker should     record. Possible values:<ul> <li><code>\"best\"</code>: Only the best result found so far is tracked. This is the default.</li> <li><code>\"last\"</code>: Only the most recently generated result is tracked.</li> </ul> </li> <li>constraint_tolerance: A tolerance for detecting constraint violations.</li> </ul> <p>The tracker object returned by <code>add_tracker</code> supports the following properties to inspect the results that it stores:</p> <ul> <li>results:   The results object that is stored.</li> <li>variables: The variables in the stored results.</li> </ul> <p>In addition, the following methods are available:</p> <ul> <li><code>reset</code>: Reset the tracker to contain     no results.</li> <li><code>dataframe</code>: Export the results     as Pandas data frames.</li> </ul>"},{"location":"usage/basics/#add_table","title":"<code>add_table</code>","text":"<p>Adds a table result handler to the plan. The resulting <code>EverestTableHandler</code> object tracks and stores results emitted by optimizers and evaluators in tables on file. It accepts a single argument:</p> <ul> <li>steps: A single step object or a list of step objects to track. The     tracker will only record results generated by the specified steps.</li> </ul>"},{"location":"usage/examples/","title":"Examples","text":"<p>It is recommended to run these examples directly using this script template, so that output is printed to the console:</p> <pre><code>from ropt_everest import EverestPlan\nfrom pathlib import Path\n\ndef run_plan(plan):\n    ...\n\nif __name__ == \"__main__\":\n    import warnings\n\n    warnings.filterwarnings(\"ignore\")\n    EverestPlan.everest(Path(__file__).with_suffix(\".yml\"))\n</code></pre>"},{"location":"usage/examples/#basic-plan","title":"Basic plan","text":"<p>A basic plan that corresponds to the default Everest optimization:</p> <pre><code>def run_plan(plan):\n    optimizer = plan.add_optimizer()\n    plan.add_tracker(optimizer)\n    plan.add_table(optimizer)\n    optimizer.run()\n</code></pre>"},{"location":"usage/examples/#running-two-optimizers","title":"Running two optimizers","text":"<p>Running two optimizers with different configurations:</p> <pre><code>def run_plan(plan):\n    optimizer = plan.add_optimizer()\n    tracker = plan.add_tracker(optimizer)\n    plan.add_table(optimizer)\n\n    print(\"Running first optimizer...\")\n    optimizer.run()\n\n    config = plan.config_copy()\n    config[\"optimization\"][\"max_function_evaluations\"] = 2\n\n    print(\"Running second optimizer...\")\n    optimizer.run(config=config, variables=tracker.variables)\n</code></pre>"},{"location":"usage/examples/#running-optimizers-in-a-loop","title":"Running optimizers in a loop","text":"<p>Run an optimizer in a loop, each time starting from the last result of the previous. Store all results in memory and export the gradients of all results to a Pandas data frame. In addition, add the index of the loop to the metadata, which an additional <code>iteration</code> column to the data frame:</p> <pre><code>def run_plan(plan):\n    optimizer = plan.add_optimizer()\n    tracker = plan.add_tracker(optimizer, what=\"last\")\n    store = plan.add_store(optimizer)\n\n    config = plan.config_copy()\n    config[\"optimization\"][\"max_function_evaluations\"] = 2\n    for idx in range(3):\n        optimizer.run(\n            config=config,\n            variables=tracker.variables,\n            metadata={\"iteration\": idx},\n        )\n    print(store.dataframe(\"gradients\"))\n</code></pre>"},{"location":"usage/examples/#running-an-evaluation","title":"Running an evaluation","text":"<p>Run an evaluation of the function for two control vectors and export the results to a Pandas data frame:</p> <pre><code>def run_plan(plan):\n    evaluator = plan.add_evaluator()\n    store = plan.add_store(evaluator)\n    evaluator.run(variables=[[0, 0, 0], [1, 1, 1]])\n    print(store.dataframe(\"results\"))\n</code></pre>"},{"location":"usage/running/","title":"Running the plan","text":"<p>Typically, Everest optimization workflows are executed using the standard Everest command-line interface (CLI). This approach works seamlessly even when you've implemented a custom <code>run_plan</code> function using <code>ropt-everest</code>. However, the Everest CLI often obscures exceptions and errors, providing limited feedback or relegating detailed information to log files. This can be cumbersome during the development of a custom <code>run_plan</code> function, as not all exceptions are immediately visible. Moreover, the standard Everest CLI redirects standard output (stdout) and standard error (stderr) to files, which can further complicate debugging.</p> <p>To address these challenges, <code>ropt-everest</code> offers the <code>everest</code> class method. This method allows you to execute an Everest optimization directly, bypassing the Everest CLI. Instead of launching a separate server process in the background or on a cluster, as the Everest CLI typically does, the <code>everest</code> method runs the optimization directly within your current process. A key benefit of this is that anything written to <code>stdout</code> or <code>stderr</code> is sent directly to your console.</p> <p>Example: Custom <code>run_plan</code> and Direct Execution</p> <p>Here's an example of a Python module that customizes the optimization process. When placed in the same directory as an Everest configuration file (YAML) and given the same base name, this module will be used by Everest. It can also be directly executed as a Python script to run the workflow without the Everest CLI:</p> <pre><code>from ropt_everest import EverestPlan\nfrom pathlib import Path\n\n\ndef run_plan(plan):\n    optimizer = plan.add_optimizer()\n    tracker = plan.add_tracker(optimizer)\n    plan.add_table(optimizer)\n    optimizer.run()\n\n\nif __name__ == \"__main__\":\n    import warnings\n\n    warnings.filterwarnings(\"ignore\")\n    EverestPlan.everest(Path(__file__).with_suffix(\".yml\"))\n</code></pre> <p>Here, within the <code>if __name__ == \"__main__\":</code> block, we first suppress warnings that Everest might produce. These warnings are generally intended for end-users and are typically not relevant during the development of a custom <code>run_plan</code> function. We then execute the <code>everest</code> class method, passing the path to the corresponding configuration file, which we construct dynamically by replacing the <code>.py</code> suffix of the current file (<code>__file__</code>) with <code>.yml</code>.</p>"}]}