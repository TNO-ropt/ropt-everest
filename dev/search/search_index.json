{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>ropt-everest</code>: A plugin to enhance Everest functionality","text":""},{"location":"reference/everest_plan/","title":"The EverestPlan Class","text":""},{"location":"reference/everest_plan/#ropt_everest","title":"<code>ropt_everest</code>","text":"<p>Everest plan for ropt-everest.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestPlan","title":"<code>EverestPlan</code>","text":"<p>Represents an execution plan for an Everest optimization workflow.</p> <p>The <code>EverestPlan</code> class provides a high-level interface for defining and managing optimization workflows in Everest. It allows you to add various steps to the plan, such as optimizers, evaluators, workflow jobs, and trackers. These steps are then executed to achieve the desired optimization goal.</p> <p>Key Features:</p> <ul> <li>Step Management: Add and manage different types of optimization     steps, including optimizers, evaluators, and workflow jobs.</li> <li>Tracking and Monitoring: Incorporate trackers to monitor the     progress of specific steps and collect relevant results.</li> <li>Table Generation: Generate tables to summarize the results of the     optimization process.</li> <li>Configuration Handling: Load and manage Everest configurations,     including the ability to override default settings.</li> <li>Metadata Association: Associate arbitrary metadata with steps and     results, facilitating the tracking of additional information.</li> <li>Dynamic Metadata: Use dynamic metadata to modify metadata between     runs.</li> <li>Direct Execution: Execute the plan directly, providing more control     over stdout and error traces.</li> <li>Arbitrary Value Storage: The <code>EverestPlan</code> object can store and     retrieve arbitrary values using the indexing operator (<code>[]</code>). This     allows you to dynamically add or modify data that can be used by any     step of the plan. This is especially useful when you need to change the     metadata during a sequence of executions, as metadata can reference     these values.</li> </ul> <p>Example of Arbitrary Value Storage:</p> <pre><code>plan = EverestPlan(...)\nplan[\"my_data\"] = 123  # Set a value\nvalue = plan[\"my_data\"]  # Retrieve the value\n</code></pre> <p>Example of Dynamic Metadata:</p> <pre><code>plan[\"my_data\"] = \"initial_value\"\noptimizer = plan.add_optimizer(metadata={\"key\": \"$my_data\"})\n# When the optimizer is run, \"key\" in the metadata will be \"initial_value\".\n\nplan[\"my_data\"] = \"new_value\"\n# When the optimizer is run again, \"key\" in the metadata will now be \"new_value\".\n</code></pre>"},{"location":"reference/everest_plan/#ropt_everest.EverestPlan.config","title":"<code>config</code>  <code>property</code>","text":"<p>Retrieves the default Everest configuration.</p> <p>This property provides access to a copy of the Everest configuration used during startup. Modifications to the returned dictionary will not affect the original configuration.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>A dictionary representing the Everest configuration.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestPlan.add_optimizer","title":"<code>add_optimizer(config=None, metadata=None)</code>","text":"<p>Adds an optimizer to the execution plan.</p> <p>This method incorporates an optimization step into your Everest workflow. You can customize the optimizer's behavior using an optional configuration.</p> <p>Configuration:</p> <ul> <li>If no <code>config</code> is provided, the optimizer will use the default   Everest configuration loaded during startup.</li> <li>If a <code>config</code> dictionary is provided, it will override the default   configuration. It should be a dictionary that can be validated as an   <code>EverestConfig</code> object.</li> </ul> <p>Metadata:</p> <ul> <li>The <code>metadata</code> parameter allows you to associate arbitrary data with   each result generated by the optimizer or evaluators.</li> <li>This metadata is included in generated tables and data frames.</li> <li>The keys in the <code>metadata</code> dictionary are used as column names in   the output tables.</li> <li>Dynamic Metadata: If a metadata value is a string that begins with a   dollar sign (<code>$</code>), it's treated as a dynamic reference. The portion of   the string following the <code>$</code> is used as a key to look up a value   within the execution plan itself (accessed using <code>plan[key]</code>). This   allows you to modify the metadata between runs by changing values in   the plan.</li> </ul> <p>Example of Dynamic Metadata:</p> <pre><code>optimizer = plan.add_optimizer(metadata={\"foo\": \"$bar\"})\n# ... later in your code ...\nplan[\"bar\"] = 123\n# In the results, \"foo\" will now have the value 123\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict[str, Any] | None</code> <p>An optional dictionary containing the Everest configuration       for the optimizer. If omitted, the default configuration is       used.</p> <code>None</code> <code>metadata</code> <code>dict[str, Any] | None</code> <p>An optional dictionary of metadata to associate with the       results of the optimizer's results.</p> <code>None</code> <p>Returns:</p> Type Description <code>EverestOptimizerStep</code> <p>An <code>EverestOptimizerStep</code> object, representing the added optimizer.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestPlan.add_evaluator","title":"<code>add_evaluator(config=None, metadata=None)</code>","text":"<p>Adds an evaluator to the execution plan.</p> <p>This method allows you to integrate an evaluation step into your Everest workflow.  Evaluators are used to compute function values at specific points in the optimization process.</p> <p>Configuration:</p> <ul> <li>If no <code>config</code> is provided, the evaluator will use the default   Everest configuration loaded during startup.</li> <li>If a <code>config</code> dictionary is provided, it will override the default   configuration. It should be a dictionary that can be validated as an   <code>EverestConfig</code> object.</li> </ul> <p>Metadata:</p> <ul> <li>The <code>metadata</code> parameter allows you to associate arbitrary data with   each result generated by the evaluator.</li> <li>This metadata is included in generated tables and data frames.</li> <li>The keys in the <code>metadata</code> dictionary are used as column names in the   output tables.</li> <li>Dynamic Metadata: If a metadata value is a string that begins with a   dollar sign (<code>$</code>), it's treated as a dynamic reference. The portion of   the string following the <code>$</code> is used as a key to look up a value   within the execution plan itself (accessed using <code>plan[key]</code>). This   allows you to modify the metadata between runs by changing values in   the plan.</li> </ul> <p>Example of Dynamic Metadata:</p> <pre><code>evaluator = plan.add_evaluator(metadata={\"run_id\": \"$run_number\"})\n# ... later in your code ...\nplan[\"run_number\"] = 5\n# In the results, \"run_id\" will now have the value 5\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict[str, Any] | None</code> <p>An optional dictionary containing the Everest configuration      for the evaluator. If omitted, the default configuration is       used.</p> <code>None</code> <code>metadata</code> <code>dict[str, Any] | None</code> <p>An optional dictionary of metadata to associate with the       evaluator's results.</p> <code>None</code> <p>Returns:</p> Type Description <code>EverestEvaluatorStep</code> <p>An <code>EverestEvaluatorStep</code> object, representing the added evaluator.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestPlan.add_workflow_job","title":"<code>add_workflow_job()</code>","text":"<p>Adds a workflow job step to the execution plan.</p> <p>This method incorporates a workflow job into the execution plan. Workflow jobs are used to run external operations.</p> <p>This step can be used to incorporate different external programs or scripts into the current optimization process.</p> <p>Returns:</p> Type Description <code>EverestWorkflowJobStep</code> <p>An <code>EverestWorkflowJobStep</code> object, representing the added workflow job step.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestPlan.add_tracker","title":"<code>add_tracker(track, *, what='best', constraint_tolerance=None)</code>","text":"<p>Adds a tracker to the execution plan.</p> <p>Trackers monitor the progress of specified optimization or evaluation steps and record relevant results. They provide a way to capture and analyze the outcomes of these steps during the execution of the plan. You can configure a tracker to save the best, last, or all results generated by the tracked steps.</p> <p>A tracker is configured by three arguments:</p> <p>track: This argument specifies which steps in the execution plan the tracker should monitor. You can provide either a single <code>EverestStep</code> object (such as an optimizer or evaluator) or a sequence of <code>EverestStep</code> objects. The tracker will record the results generated by these steps.</p> <p>what: This argument determines which results the tracker should record. You can choose from the following options:</p> <ul> <li><code>\"best\"</code>: Only the best result found so far is tracked.</li> <li><code>\"last\"</code>: Only the most recently generated result is tracked.</li> <li><code>\"all\"</code>: All results are tracked.</li> </ul> <p>The default value is <code>\"best\"</code>.</p> <p>constraint_tolerance: This optional argument specifies the tolerance for constraint satisfaction. It is used to determine whether a result is considered feasible, meaning it satisfies the defined constraints within the specified tolerance. Only feasible results will be recorded. If it is not set, constraints are not tested.</p> <p>Parameters:</p> Name Type Description Default <code>track</code> <code>EverestStep | Sequence[EverestStep]</code> <p>The EverestStep(s) to track.</p> required <code>what</code> <code>Literal['best', 'last', 'all']</code> <p>Which results to track (\"best\", \"last\", or \"all\").</p> <code>'best'</code> <code>constraint_tolerance</code> <code>float | None</code> <p>Tolerance for constraint satisfaction.</p> <code>None</code> <p>Returns:</p> Type Description <code>EverestTracker</code> <p>An <code>EverestTracker</code> object, which can be used to access the tracked results.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestPlan.add_table","title":"<code>add_table(track)</code>","text":"<p>Adds a handler that create a table to the execution plan.</p> <p>This handler will monitor the progress of specified optimization or evaluation steps and record relevant results. A set of tables will then be generated and saved in the output dir.</p> <p>Parameters:</p> Name Type Description Default <code>track</code> <code>EverestStep | Sequence[EverestStep]</code> <p>The EverestStep(s) to track.</p> required <p>Returns:</p> Type Description <code>EverestTableHandler</code> <p>An <code>EverestTableHandler</code> object.</p>"},{"location":"reference/everest_plan/#ropt_everest.EverestPlan.everest","title":"<code>everest(config_file)</code>  <code>classmethod</code>","text":"<p>Runs an Everest optimization directly from a configuration file.</p> <p>This class method provides a convenient way to execute an Everest optimization plan  without having to use the <code>everest</code> command. This method will run a full optimization, but it will not produce the usual monitoring output of Everest.</p> <p>Using this method instead of the <code>everest</code> command-line tool offers several advantages, including:</p> <ul> <li>Direct access to standard output (stdout): Unlike the <code>everest</code>   command, this does not redirect standard output.</li> <li>Error traces: If errors occur during the optimization, you'll get a   full Python stack trace, making debugging easier.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>config_file</code> <code>str</code> <p>The path to the Everest configuration file (YAML).</p> required"}]}